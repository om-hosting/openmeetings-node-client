/* tslint:disable */
/* eslint-disable */
/**
 * Apache OpenMeetings API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.0-SNAPSHOT
 * Contact: dev@openmeetings.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
/**
 * NetTestServiceApi - axios parameter creator
 * @export
 */
export const NetTestServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generate a sample for network test
         * @param {string} type one of ping, jitter, download, upload
         * @param {number} size requests size of sample
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get2: async (type: string, size: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling get2.');
            }
            // verify required parameter 'size' is not null or undefined
            if (size === null || size === undefined) {
                throw new RequiredError('size','Required parameter size was null or undefined when calling get2.');
            }
            const localVarPath = `/networktest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload media to test upload speed
         * @param {any} body stream to upload
         * @param {number} size size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upload: async (body: any, size: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling upload.');
            }
            // verify required parameter 'size' is not null or undefined
            if (size === null || size === undefined) {
                throw new RequiredError('size','Required parameter size was null or undefined when calling upload.');
            }
            const localVarPath = `/networktest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            localVarHeaderParameter['Content-Type'] = 'application/octet-stream';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NetTestServiceApi - functional programming interface
 * @export
 */
export const NetTestServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Generate a sample for network test
         * @param {string} type one of ping, jitter, download, upload
         * @param {number} size requests size of sample
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get2(type: string, size: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await NetTestServiceApiAxiosParamCreator(configuration).get2(type, size, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Upload media to test upload speed
         * @param {any} body stream to upload
         * @param {number} size size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upload(body: any, size: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await NetTestServiceApiAxiosParamCreator(configuration).upload(body, size, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * NetTestServiceApi - factory interface
 * @export
 */
export const NetTestServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Generate a sample for network test
         * @param {string} type one of ping, jitter, download, upload
         * @param {number} size requests size of sample
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get2(type: string, size: number, options?: any): AxiosPromise<void> {
            return NetTestServiceApiFp(configuration).get2(type, size, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload media to test upload speed
         * @param {any} body stream to upload
         * @param {number} size size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upload(body: any, size: number, options?: any): AxiosPromise<void> {
            return NetTestServiceApiFp(configuration).upload(body, size, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NetTestServiceApi - object-oriented interface
 * @export
 * @class NetTestServiceApi
 * @extends {BaseAPI}
 */
export class NetTestServiceApi extends BaseAPI {
    /**
     * Generate a sample for network test
     * @param {string} type one of ping, jitter, download, upload
     * @param {number} size requests size of sample
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetTestServiceApi
     */
    public get2(type: string, size: number, options?: any) {
        return NetTestServiceApiFp(this.configuration).get2(type, size, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Upload media to test upload speed
     * @param {any} body stream to upload
     * @param {number} size size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetTestServiceApi
     */
    public upload(body: any, size: number, options?: any) {
        return NetTestServiceApiFp(this.configuration).upload(body, size, options).then((request) => request(this.axios, this.basePath));
    }
}
