/* tslint:disable */
/* eslint-disable */
/**
 * Apache OpenMeetings API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.0-SNAPSHOT
 * Contact: dev@openmeetings.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { GroupDTO } from '../models';
import { ServiceResult } from '../models';
import { UserSearchResult } from '../models';
/**
 * GroupServiceApi - axios parameter creator
 * @export
 */
export const GroupServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * add a new group
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {string} name The name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add1: async (sid: string, name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sid' is not null or undefined
            if (sid === null || sid === undefined) {
                throw new RequiredError('sid','Required parameter sid was null or undefined when calling add1.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling add1.');
            }
            const localVarPath = `/group`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sid !== undefined) {
                localVarQueryParameter['sid'] = sid;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a room to an group
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {number} id Id of group that the room is being paired with
         * @param {number} roomid Id of room to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRoom: async (sid: string, id: number, roomid: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sid' is not null or undefined
            if (sid === null || sid === undefined) {
                throw new RequiredError('sid','Required parameter sid was null or undefined when calling addRoom.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling addRoom.');
            }
            // verify required parameter 'roomid' is not null or undefined
            if (roomid === null || roomid === undefined) {
                throw new RequiredError('roomid','Required parameter roomid was null or undefined when calling addRoom.');
            }
            const localVarPath = `/group/{id}/rooms/add/{roomid}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"roomid"}}`, encodeURIComponent(String(roomid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sid !== undefined) {
                localVarQueryParameter['sid'] = sid;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Add USER to a certain group
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {number} id the USER id
         * @param {number} userid the group id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser: async (sid: string, id: number, userid: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sid' is not null or undefined
            if (sid === null || sid === undefined) {
                throw new RequiredError('sid','Required parameter sid was null or undefined when calling addUser.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling addUser.');
            }
            // verify required parameter 'userid' is not null or undefined
            if (userid === null || userid === undefined) {
                throw new RequiredError('userid','Required parameter userid was null or undefined when calling addUser.');
            }
            const localVarPath = `/group/{id}/users/{userid}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"userid"}}`, encodeURIComponent(String(userid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sid !== undefined) {
                localVarQueryParameter['sid'] = sid;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a group
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {number} id the id of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete2: async (sid: string, id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sid' is not null or undefined
            if (sid === null || sid === undefined) {
                throw new RequiredError('sid','Required parameter sid was null or undefined when calling delete2.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling delete2.');
            }
            const localVarPath = `/group/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sid !== undefined) {
                localVarQueryParameter['sid'] = sid;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of all groups
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get1: async (sid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sid' is not null or undefined
            if (sid === null || sid === undefined) {
                throw new RequiredError('sid','Required parameter sid was null or undefined when calling get1.');
            }
            const localVarPath = `/group`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sid !== undefined) {
                localVarQueryParameter['sid'] = sid;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Search users and return them
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {number} id the group id
         * @param {number} start first record
         * @param {number} max max records
         * @param {string} orderby orderby clause
         * @param {boolean} asc asc or desc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (sid: string, id: number, start: number, max: number, orderby: string, asc: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sid' is not null or undefined
            if (sid === null || sid === undefined) {
                throw new RequiredError('sid','Required parameter sid was null or undefined when calling getUsers.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getUsers.');
            }
            // verify required parameter 'start' is not null or undefined
            if (start === null || start === undefined) {
                throw new RequiredError('start','Required parameter start was null or undefined when calling getUsers.');
            }
            // verify required parameter 'max' is not null or undefined
            if (max === null || max === undefined) {
                throw new RequiredError('max','Required parameter max was null or undefined when calling getUsers.');
            }
            // verify required parameter 'orderby' is not null or undefined
            if (orderby === null || orderby === undefined) {
                throw new RequiredError('orderby','Required parameter orderby was null or undefined when calling getUsers.');
            }
            // verify required parameter 'asc' is not null or undefined
            if (asc === null || asc === undefined) {
                throw new RequiredError('asc','Required parameter asc was null or undefined when calling getUsers.');
            }
            const localVarPath = `/group/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sid !== undefined) {
                localVarQueryParameter['sid'] = sid;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (max !== undefined) {
                localVarQueryParameter['max'] = max;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (asc !== undefined) {
                localVarQueryParameter['asc'] = asc;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove USER from a certain group
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {number} id the USER id
         * @param {number} userid the group id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUser: async (sid: string, id: number, userid: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sid' is not null or undefined
            if (sid === null || sid === undefined) {
                throw new RequiredError('sid','Required parameter sid was null or undefined when calling removeUser.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling removeUser.');
            }
            // verify required parameter 'userid' is not null or undefined
            if (userid === null || userid === undefined) {
                throw new RequiredError('userid','Required parameter userid was null or undefined when calling removeUser.');
            }
            const localVarPath = `/group/{id}/users/{userid}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"userid"}}`, encodeURIComponent(String(userid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sid !== undefined) {
                localVarQueryParameter['sid'] = sid;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupServiceApi - functional programming interface
 * @export
 */
export const GroupServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * add a new group
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {string} name The name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async add1(sid: string, name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceResult>> {
            const localVarAxiosArgs = await GroupServiceApiAxiosParamCreator(configuration).add1(sid, name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds a room to an group
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {number} id Id of group that the room is being paired with
         * @param {number} roomid Id of room to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addRoom(sid: string, id: number, roomid: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceResult>> {
            const localVarAxiosArgs = await GroupServiceApiAxiosParamCreator(configuration).addRoom(sid, id, roomid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Add USER to a certain group
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {number} id the USER id
         * @param {number} userid the group id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUser(sid: string, id: number, userid: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceResult>> {
            const localVarAxiosArgs = await GroupServiceApiAxiosParamCreator(configuration).addUser(sid, id, userid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a group
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {number} id the id of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete2(sid: string, id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceResult>> {
            const localVarAxiosArgs = await GroupServiceApiAxiosParamCreator(configuration).delete2(sid, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the list of all groups
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get1(sid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GroupDTO>>> {
            const localVarAxiosArgs = await GroupServiceApiAxiosParamCreator(configuration).get1(sid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Search users and return them
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {number} id the group id
         * @param {number} start first record
         * @param {number} max max records
         * @param {string} orderby orderby clause
         * @param {boolean} asc asc or desc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(sid: string, id: number, start: number, max: number, orderby: string, asc: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSearchResult>> {
            const localVarAxiosArgs = await GroupServiceApiAxiosParamCreator(configuration).getUsers(sid, id, start, max, orderby, asc, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove USER from a certain group
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {number} id the USER id
         * @param {number} userid the group id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeUser(sid: string, id: number, userid: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceResult>> {
            const localVarAxiosArgs = await GroupServiceApiAxiosParamCreator(configuration).removeUser(sid, id, userid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GroupServiceApi - factory interface
 * @export
 */
export const GroupServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * add a new group
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {string} name The name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add1(sid: string, name: string, options?: any): AxiosPromise<ServiceResult> {
            return GroupServiceApiFp(configuration).add1(sid, name, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a room to an group
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {number} id Id of group that the room is being paired with
         * @param {number} roomid Id of room to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRoom(sid: string, id: number, roomid: number, options?: any): AxiosPromise<ServiceResult> {
            return GroupServiceApiFp(configuration).addRoom(sid, id, roomid, options).then((request) => request(axios, basePath));
        },
        /**
         * Add USER to a certain group
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {number} id the USER id
         * @param {number} userid the group id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser(sid: string, id: number, userid: number, options?: any): AxiosPromise<ServiceResult> {
            return GroupServiceApiFp(configuration).addUser(sid, id, userid, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a group
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {number} id the id of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete2(sid: string, id: number, options?: any): AxiosPromise<ServiceResult> {
            return GroupServiceApiFp(configuration).delete2(sid, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of all groups
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get1(sid: string, options?: any): AxiosPromise<Array<GroupDTO>> {
            return GroupServiceApiFp(configuration).get1(sid, options).then((request) => request(axios, basePath));
        },
        /**
         * Search users and return them
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {number} id the group id
         * @param {number} start first record
         * @param {number} max max records
         * @param {string} orderby orderby clause
         * @param {boolean} asc asc or desc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(sid: string, id: number, start: number, max: number, orderby: string, asc: boolean, options?: any): AxiosPromise<UserSearchResult> {
            return GroupServiceApiFp(configuration).getUsers(sid, id, start, max, orderby, asc, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove USER from a certain group
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {number} id the USER id
         * @param {number} userid the group id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUser(sid: string, id: number, userid: number, options?: any): AxiosPromise<ServiceResult> {
            return GroupServiceApiFp(configuration).removeUser(sid, id, userid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupServiceApi - object-oriented interface
 * @export
 * @class GroupServiceApi
 * @extends {BaseAPI}
 */
export class GroupServiceApi extends BaseAPI {
    /**
     * add a new group
     * @param {string} sid The SID of the User. This SID must be marked as Loggedin
     * @param {string} name The name of the group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupServiceApi
     */
    public add1(sid: string, name: string, options?: any) {
        return GroupServiceApiFp(this.configuration).add1(sid, name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Adds a room to an group
     * @param {string} sid The SID of the User. This SID must be marked as Loggedin
     * @param {number} id Id of group that the room is being paired with
     * @param {number} roomid Id of room to be added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupServiceApi
     */
    public addRoom(sid: string, id: number, roomid: number, options?: any) {
        return GroupServiceApiFp(this.configuration).addRoom(sid, id, roomid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add USER to a certain group
     * @param {string} sid The SID of the User. This SID must be marked as Loggedin
     * @param {number} id the USER id
     * @param {number} userid the group id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupServiceApi
     */
    public addUser(sid: string, id: number, userid: number, options?: any) {
        return GroupServiceApiFp(this.configuration).addUser(sid, id, userid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a group
     * @param {string} sid The SID of the User. This SID must be marked as Loggedin
     * @param {number} id the id of the group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupServiceApi
     */
    public delete2(sid: string, id: number, options?: any) {
        return GroupServiceApiFp(this.configuration).delete2(sid, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the list of all groups
     * @param {string} sid The SID of the User. This SID must be marked as Loggedin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupServiceApi
     */
    public get1(sid: string, options?: any) {
        return GroupServiceApiFp(this.configuration).get1(sid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Search users and return them
     * @param {string} sid The SID of the User. This SID must be marked as Loggedin
     * @param {number} id the group id
     * @param {number} start first record
     * @param {number} max max records
     * @param {string} orderby orderby clause
     * @param {boolean} asc asc or desc
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupServiceApi
     */
    public getUsers(sid: string, id: number, start: number, max: number, orderby: string, asc: boolean, options?: any) {
        return GroupServiceApiFp(this.configuration).getUsers(sid, id, start, max, orderby, asc, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove USER from a certain group
     * @param {string} sid The SID of the User. This SID must be marked as Loggedin
     * @param {number} id the USER id
     * @param {number} userid the group id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupServiceApi
     */
    public removeUser(sid: string, id: number, userid: number, options?: any) {
        return GroupServiceApiFp(this.configuration).removeUser(sid, id, userid, options).then((request) => request(this.axios, this.basePath));
    }
}
