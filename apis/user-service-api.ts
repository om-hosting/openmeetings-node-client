/* tslint:disable */
/* eslint-disable */
/**
 * Apache OpenMeetings API
 * Integration API enables to connect to an OpenMeetings instance, eg for generating users, create links to directly access conference rooms.<br/><br/>         <b>It is mainly designed for Server2Server integration, for example to integrate into your website, CMS or 3rd party application</b><br/><br/>         For examples how to use the Rest API see <a href=\"https://openmeetings.apache.org/RestAPISample.html\" target=\"_BLANK\">https://openmeetings.apache.org/RestAPISample.html</a>.<br/><br/>         Community contributed modules for using this API include for example:         <ul>          <li><a href=\"https://openmeetings.apache.org/RestAPISample.html#how-to-integrate-using-nodejs\" target=\"_BLANK\"> Node.js module for using API</a></li>         </ul>         Other community plugins using this API for Moodle, SugarCRM, Drupal, Joomla can be found in the Configuration>Plugins section at <a href=\"https://openmeetings.apache.org\" target=\"_BLANK\">https://openmeetings.apache.org</a>
 *
 * OpenAPI spec version: 7.0.0-SNAPSHOT
 * Contact: dev@openmeetings.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ExternalUserDTO } from '../models';
import { RoomOptionsDTO } from '../models';
import { ServiceResultWrapper } from '../models';
import { UserDTO } from '../models';
import { UserDTOListWrapper } from '../models';
import { UserDTOWrapper } from '../models';
/**
 * UserServiceApi - axios parameter creator
 * @export
 */
export const UserServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a new User like through the Frontend, but also does activates the  Account To do SSO see the methods to create a hash and use those ones!
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {UserDTO} [user] 
         * @param {boolean} [confirm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add3: async (sid: string, user?: UserDTO, confirm?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sid' is not null or undefined
            if (sid === null || sid === undefined) {
                throw new RequiredError('sid','Required parameter sid was null or undefined when calling add3.');
            }
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            if (sid !== undefined) {
                localVarQueryParameter['sid'] = sid;
            }


            if (user !== undefined) { 
                localVarFormParams.append('user', user as any);
            }

            if (confirm !== undefined) { 
                localVarFormParams.append('confirm', confirm as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a certain user by its id
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {number} id the openmeetings user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete5: async (sid: string, id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sid' is not null or undefined
            if (sid === null || sid === undefined) {
                throw new RequiredError('sid','Required parameter sid was null or undefined when calling delete5.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling delete5.');
            }
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sid !== undefined) {
                localVarQueryParameter['sid'] = sid;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a certain user by its external user id
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {string} externaltype externalUserId
         * @param {string} externalid externalType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExternal1: async (sid: string, externaltype: string, externalid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sid' is not null or undefined
            if (sid === null || sid === undefined) {
                throw new RequiredError('sid','Required parameter sid was null or undefined when calling deleteExternal1.');
            }
            // verify required parameter 'externaltype' is not null or undefined
            if (externaltype === null || externaltype === undefined) {
                throw new RequiredError('externaltype','Required parameter externaltype was null or undefined when calling deleteExternal1.');
            }
            // verify required parameter 'externalid' is not null or undefined
            if (externalid === null || externalid === undefined) {
                throw new RequiredError('externalid','Required parameter externalid was null or undefined when calling deleteExternal1.');
            }
            const localVarPath = `/user/{externaltype}/{externalid}`
                .replace(`{${"externaltype"}}`, encodeURIComponent(String(externaltype)))
                .replace(`{${"externalid"}}`, encodeURIComponent(String(externalid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sid !== undefined) {
                localVarQueryParameter['sid'] = sid;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all users in the system!
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get3: async (sid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sid' is not null or undefined
            if (sid === null || sid === undefined) {
                throw new RequiredError('sid','Required parameter sid was null or undefined when calling get3.');
            }
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sid !== undefined) {
                localVarQueryParameter['sid'] = sid;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets the SessionObject for a certain SID, after setting this  Session-Object you can use the SID + a RoomId to enter any Room. ...  Session-Hashs are deleted 15 minutes after the creation if not used.
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {ExternalUserDTO} [user] 
         * @param {RoomOptionsDTO} [options] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoomHash: async (sid: string, user?: ExternalUserDTO, roomOptions?: RoomOptionsDTO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sid' is not null or undefined
            if (sid === null || sid === undefined) {
                throw new RequiredError('sid','Required parameter sid was null or undefined when calling getRoomHash.');
            }
            const localVarPath = `/user/hash`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            if (sid !== undefined) {
                localVarQueryParameter['sid'] = sid;
            }


            if (user !== undefined) { 
                localVarFormParams.append('user', JSON.stringify(user));
            }

            if (roomOptions !== undefined) {
                localVarFormParams.append('options', JSON.stringify(roomOptions));
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Login and create sessionId required for sub-sequent calls
         * @param {string} user login or email of Openmeetings user with admin or SOAP-rights
         * @param {string} pass password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (user: string, pass: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling login.');
            }
            // verify required parameter 'pass' is not null or undefined
            if (pass === null || pass === undefined) {
                throw new RequiredError('pass','Required parameter pass was null or undefined when calling login.');
            }
            const localVarPath = `/user/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }

            if (pass !== undefined) {
                localVarQueryParameter['pass'] = pass;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserServiceApi - functional programming interface
 * @export
 */
export const UserServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Adds a new User like through the Frontend, but also does activates the  Account To do SSO see the methods to create a hash and use those ones!
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {UserDTO} [user] 
         * @param {boolean} [confirm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async add3(sid: string, user?: UserDTO, confirm?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTOWrapper>> {
            const localVarAxiosArgs = await UserServiceApiAxiosParamCreator(configuration).add3(sid, user, confirm, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a certain user by its id
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {number} id the openmeetings user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete5(sid: string, id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceResultWrapper>> {
            const localVarAxiosArgs = await UserServiceApiAxiosParamCreator(configuration).delete5(sid, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a certain user by its external user id
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {string} externaltype externalUserId
         * @param {string} externalid externalType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExternal1(sid: string, externaltype: string, externalid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceResultWrapper>> {
            const localVarAxiosArgs = await UserServiceApiAxiosParamCreator(configuration).deleteExternal1(sid, externaltype, externalid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists all users in the system!
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get3(sid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTOListWrapper>> {
            const localVarAxiosArgs = await UserServiceApiAxiosParamCreator(configuration).get3(sid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sets the SessionObject for a certain SID, after setting this  Session-Object you can use the SID + a RoomId to enter any Room. ...  Session-Hashs are deleted 15 minutes after the creation if not used.
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {ExternalUserDTO} [user] 
         * @param {RoomOptionsDTO} [options] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoomHash(sid: string, user?: ExternalUserDTO, roomOptions?: RoomOptionsDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceResultWrapper>> {
            const localVarAxiosArgs = await UserServiceApiAxiosParamCreator(configuration).getRoomHash(sid, user, roomOptions, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Login and create sessionId required for sub-sequent calls
         * @param {string} user login or email of Openmeetings user with admin or SOAP-rights
         * @param {string} pass password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(user: string, pass: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceResultWrapper>> {
            const localVarAxiosArgs = await UserServiceApiAxiosParamCreator(configuration).login(user, pass, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserServiceApi - factory interface
 * @export
 */
export const UserServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Adds a new User like through the Frontend, but also does activates the  Account To do SSO see the methods to create a hash and use those ones!
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {UserDTO} [user] 
         * @param {boolean} [confirm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add3(sid: string, user?: UserDTO, confirm?: boolean, options?: any): AxiosPromise<UserDTOWrapper> {
            return UserServiceApiFp(configuration).add3(sid, user, confirm, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a certain user by its id
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {number} id the openmeetings user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete5(sid: string, id: number, options?: any): AxiosPromise<ServiceResultWrapper> {
            return UserServiceApiFp(configuration).delete5(sid, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a certain user by its external user id
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {string} externaltype externalUserId
         * @param {string} externalid externalType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExternal1(sid: string, externaltype: string, externalid: string, options?: any): AxiosPromise<ServiceResultWrapper> {
            return UserServiceApiFp(configuration).deleteExternal1(sid, externaltype, externalid, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all users in the system!
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get3(sid: string, options?: any): AxiosPromise<UserDTOListWrapper> {
            return UserServiceApiFp(configuration).get3(sid, options).then((request) => request(axios, basePath));
        },
        /**
         * Sets the SessionObject for a certain SID, after setting this  Session-Object you can use the SID + a RoomId to enter any Room. ...  Session-Hashs are deleted 15 minutes after the creation if not used.
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {ExternalUserDTO} [user] 
         * @param {RoomOptionsDTO} [options] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoomHash(sid: string, user?: ExternalUserDTO, roomOptions?: RoomOptionsDTO, options?: any): AxiosPromise<ServiceResultWrapper> {
            return UserServiceApiFp(configuration).getRoomHash(sid, user, options, options).then((request) => request(axios, basePath));
        },
        /**
         * Login and create sessionId required for sub-sequent calls
         * @param {string} user login or email of Openmeetings user with admin or SOAP-rights
         * @param {string} pass password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(user: string, pass: string, options?: any): AxiosPromise<ServiceResultWrapper> {
            return UserServiceApiFp(configuration).login(user, pass, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserServiceApi - object-oriented interface
 * @export
 * @class UserServiceApi
 * @extends {BaseAPI}
 */
export class UserServiceApi extends BaseAPI {
    /**
     * Adds a new User like through the Frontend, but also does activates the  Account To do SSO see the methods to create a hash and use those ones!
     * @param {string} sid The SID of the User. This SID must be marked as Loggedin
     * @param {UserDTO} [user] 
     * @param {boolean} [confirm] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    public add3(sid: string, user?: UserDTO, confirm?: boolean, options?: any) {
        return UserServiceApiFp(this.configuration).add3(sid, user, confirm, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a certain user by its id
     * @param {string} sid The SID of the User. This SID must be marked as Loggedin
     * @param {number} id the openmeetings user id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    public delete5(sid: string, id: number, options?: any) {
        return UserServiceApiFp(this.configuration).delete5(sid, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a certain user by its external user id
     * @param {string} sid The SID of the User. This SID must be marked as Loggedin
     * @param {string} externaltype externalUserId
     * @param {string} externalid externalType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    public deleteExternal1(sid: string, externaltype: string, externalid: string, options?: any) {
        return UserServiceApiFp(this.configuration).deleteExternal1(sid, externaltype, externalid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all users in the system!
     * @param {string} sid The SID of the User. This SID must be marked as Loggedin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    public get3(sid: string, options?: any) {
        return UserServiceApiFp(this.configuration).get3(sid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Sets the SessionObject for a certain SID, after setting this  Session-Object you can use the SID + a RoomId to enter any Room. ...  Session-Hashs are deleted 15 minutes after the creation if not used.
     * @param {string} sid The SID of the User. This SID must be marked as Loggedin
     * @param {ExternalUserDTO} [user] 
     * @param {RoomOptionsDTO} [options] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    public getRoomHash(sid: string, user?: ExternalUserDTO, roomOptions?: RoomOptionsDTO, options?: any) {
        return UserServiceApiFp(this.configuration).getRoomHash(sid, user, roomOptions, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Login and create sessionId required for sub-sequent calls
     * @param {string} user login or email of Openmeetings user with admin or SOAP-rights
     * @param {string} pass password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    public login(user: string, pass: string, options?: any) {
        return UserServiceApiFp(this.configuration).login(user, pass, options).then((request) => request(this.axios, this.basePath));
    }
}
