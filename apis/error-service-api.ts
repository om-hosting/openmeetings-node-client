/* tslint:disable */
/* eslint-disable */
/**
 * Apache OpenMeetings API
 * Integration API enables to connect to an OpenMeetings instance, eg for generating users, create links to directly access conference rooms.<br/><br/>         <b>It is mainly designed for Server2Server integration, for example to integrate into your website, CMS or 3rd party application</b><br/><br/>         For examples how to use the Rest API see <a href=\"https://openmeetings.apache.org/RestAPISample.html\" target=\"_BLANK\">https://openmeetings.apache.org/RestAPISample.html</a>.<br/><br/>         Community contributed modules for using this API include for example:         <ul>          <li><a href=\"https://openmeetings.apache.org/RestAPISample.html#how-to-integrate-using-nodejs\" target=\"_BLANK\"> Node.js module for using API</a></li>         </ul>         Other community plugins using this API for Moodle, SugarCRM, Drupal, Joomla can be found in the Configuration>Plugins section at <a href=\"https://openmeetings.apache.org\" target=\"_BLANK\">https://openmeetings.apache.org</a>
 *
 * OpenAPI spec version: 7.0.0-SNAPSHOT
 * Contact: dev@openmeetings.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ServiceResultWrapper } from '../models';
/**
 * ErrorServiceApi - axios parameter creator
 * @export
 */
export const ErrorServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Loads an Error-Object. If a Method returns a negative Result, its an  Error-id, it needs a languageId to specify in which language you want to  display/read the error-message. English has the Language-ID one, for  different one see the list of languages
         * @param {string} key the error key for ex. &#x60;error.unknown&#x60;
         * @param {number} lang The id of the language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (key: string, lang: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling get.');
            }
            // verify required parameter 'lang' is not null or undefined
            if (lang === null || lang === undefined) {
                throw new RequiredError('lang','Required parameter lang was null or undefined when calling get.');
            }
            const localVarPath = `/error/{key}/{lang}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)))
                .replace(`{${"lang"}}`, encodeURIComponent(String(lang)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Logs an error to the log file for reporting
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {string} message The message to log
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        report: async (sid: string, message: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sid' is not null or undefined
            if (sid === null || sid === undefined) {
                throw new RequiredError('sid','Required parameter sid was null or undefined when calling report.');
            }
            // verify required parameter 'message' is not null or undefined
            if (message === null || message === undefined) {
                throw new RequiredError('message','Required parameter message was null or undefined when calling report.');
            }
            const localVarPath = `/error/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sid !== undefined) {
                localVarQueryParameter['sid'] = sid;
            }

            if (message !== undefined) {
                localVarQueryParameter['message'] = message;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ErrorServiceApi - functional programming interface
 * @export
 */
export const ErrorServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Loads an Error-Object. If a Method returns a negative Result, its an  Error-id, it needs a languageId to specify in which language you want to  display/read the error-message. English has the Language-ID one, for  different one see the list of languages
         * @param {string} key the error key for ex. &#x60;error.unknown&#x60;
         * @param {number} lang The id of the language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(key: string, lang: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceResultWrapper>> {
            const localVarAxiosArgs = await ErrorServiceApiAxiosParamCreator(configuration).get(key, lang, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Logs an error to the log file for reporting
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {string} message The message to log
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async report(sid: string, message: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ErrorServiceApiAxiosParamCreator(configuration).report(sid, message, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ErrorServiceApi - factory interface
 * @export
 */
export const ErrorServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Loads an Error-Object. If a Method returns a negative Result, its an  Error-id, it needs a languageId to specify in which language you want to  display/read the error-message. English has the Language-ID one, for  different one see the list of languages
         * @param {string} key the error key for ex. &#x60;error.unknown&#x60;
         * @param {number} lang The id of the language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(key: string, lang: number, options?: any): AxiosPromise<ServiceResultWrapper> {
            return ErrorServiceApiFp(configuration).get(key, lang, options).then((request) => request(axios, basePath));
        },
        /**
         * Logs an error to the log file for reporting
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {string} message The message to log
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        report(sid: string, message: string, options?: any): AxiosPromise<void> {
            return ErrorServiceApiFp(configuration).report(sid, message, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ErrorServiceApi - object-oriented interface
 * @export
 * @class ErrorServiceApi
 * @extends {BaseAPI}
 */
export class ErrorServiceApi extends BaseAPI {
    /**
     * Loads an Error-Object. If a Method returns a negative Result, its an  Error-id, it needs a languageId to specify in which language you want to  display/read the error-message. English has the Language-ID one, for  different one see the list of languages
     * @param {string} key the error key for ex. &#x60;error.unknown&#x60;
     * @param {number} lang The id of the language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErrorServiceApi
     */
    public get(key: string, lang: number, options?: any) {
        return ErrorServiceApiFp(this.configuration).get(key, lang, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Logs an error to the log file for reporting
     * @param {string} sid The SID of the User. This SID must be marked as Loggedin
     * @param {string} message The message to log
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErrorServiceApi
     */
    public report(sid: string, message: string, options?: any) {
        return ErrorServiceApiFp(this.configuration).report(sid, message, options).then((request) => request(this.axios, this.basePath));
    }
}
