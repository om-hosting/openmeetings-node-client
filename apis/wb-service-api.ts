/* tslint:disable */
/* eslint-disable */
/**
 * Apache OpenMeetings API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.0-SNAPSHOT
 * Contact: dev@openmeetings.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ServiceResult } from '../models';
import { UploadwbTypeBody } from '../models';
/**
 * WbServiceApi - axios parameter creator
 * @export
 */
export const WbServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method will do the same as clean slide in the room (except for there will be no UNDO)
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {number} roomid id of the room to clean
         * @param {number} wbid id of the white board to clean
         * @param {number} slide slide number (zero based)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cleanSlide: async (sid: string, roomid: number, wbid: number, slide: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sid' is not null or undefined
            if (sid === null || sid === undefined) {
                throw new RequiredError('sid','Required parameter sid was null or undefined when calling cleanSlide.');
            }
            // verify required parameter 'roomid' is not null or undefined
            if (roomid === null || roomid === undefined) {
                throw new RequiredError('roomid','Required parameter roomid was null or undefined when calling cleanSlide.');
            }
            // verify required parameter 'wbid' is not null or undefined
            if (wbid === null || wbid === undefined) {
                throw new RequiredError('wbid','Required parameter wbid was null or undefined when calling cleanSlide.');
            }
            // verify required parameter 'slide' is not null or undefined
            if (slide === null || slide === undefined) {
                throw new RequiredError('slide','Required parameter slide was null or undefined when calling cleanSlide.');
            }
            const localVarPath = `/wb/cleanslide/{roomid}/{wbid}/{slide}`
                .replace(`{${"roomid"}}`, encodeURIComponent(String(roomid)))
                .replace(`{${"wbid"}}`, encodeURIComponent(String(wbid)))
                .replace(`{${"slide"}}`, encodeURIComponent(String(slide)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sid !== undefined) {
                localVarQueryParameter['sid'] = sid;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This method will do the same as clean WB in the room (except for there will be no UNDO)
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {number} roomid id of the room to clean
         * @param {number} wbid id of the white board to clean
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cleanWb1: async (sid: string, roomid: number, wbid: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sid' is not null or undefined
            if (sid === null || sid === undefined) {
                throw new RequiredError('sid','Required parameter sid was null or undefined when calling cleanWb1.');
            }
            // verify required parameter 'roomid' is not null or undefined
            if (roomid === null || roomid === undefined) {
                throw new RequiredError('roomid','Required parameter roomid was null or undefined when calling cleanWb1.');
            }
            // verify required parameter 'wbid' is not null or undefined
            if (wbid === null || wbid === undefined) {
                throw new RequiredError('wbid','Required parameter wbid was null or undefined when calling cleanWb1.');
            }
            const localVarPath = `/wb/cleanwb/{roomid}/{wbid}`
                .replace(`{${"roomid"}}`, encodeURIComponent(String(roomid)))
                .replace(`{${"wbid"}}`, encodeURIComponent(String(wbid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sid !== undefined) {
                localVarQueryParameter['sid'] = sid;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This method will remove all whiteboards from given room  and create empty one(s) for room files specified
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {number} id id of the room to clean
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetWb: async (sid: string, id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sid' is not null or undefined
            if (sid === null || sid === undefined) {
                throw new RequiredError('sid','Required parameter sid was null or undefined when calling resetWb.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling resetWb.');
            }
            const localVarPath = `/wb/resetwb/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sid !== undefined) {
                localVarQueryParameter['sid'] = sid;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This method will receive WB as binary data (png) and store it to temporary PDF/PNG file
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {string} type the type of document being saved PNG/PDF
         * @param {UploadwbTypeBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadWb: async (sid: string, type: string, body?: UploadwbTypeBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sid' is not null or undefined
            if (sid === null || sid === undefined) {
                throw new RequiredError('sid','Required parameter sid was null or undefined when calling uploadWb.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling uploadWb.');
            }
            const localVarPath = `/wb/uploadwb/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sid !== undefined) {
                localVarQueryParameter['sid'] = sid;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WbServiceApi - functional programming interface
 * @export
 */
export const WbServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This method will do the same as clean slide in the room (except for there will be no UNDO)
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {number} roomid id of the room to clean
         * @param {number} wbid id of the white board to clean
         * @param {number} slide slide number (zero based)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cleanSlide(sid: string, roomid: number, wbid: number, slide: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceResult>> {
            const localVarAxiosArgs = await WbServiceApiAxiosParamCreator(configuration).cleanSlide(sid, roomid, wbid, slide, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This method will do the same as clean WB in the room (except for there will be no UNDO)
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {number} roomid id of the room to clean
         * @param {number} wbid id of the white board to clean
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cleanWb1(sid: string, roomid: number, wbid: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceResult>> {
            const localVarAxiosArgs = await WbServiceApiAxiosParamCreator(configuration).cleanWb1(sid, roomid, wbid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This method will remove all whiteboards from given room  and create empty one(s) for room files specified
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {number} id id of the room to clean
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetWb(sid: string, id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceResult>> {
            const localVarAxiosArgs = await WbServiceApiAxiosParamCreator(configuration).resetWb(sid, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This method will receive WB as binary data (png) and store it to temporary PDF/PNG file
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {string} type the type of document being saved PNG/PDF
         * @param {UploadwbTypeBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadWb(sid: string, type: string, body?: UploadwbTypeBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceResult>> {
            const localVarAxiosArgs = await WbServiceApiAxiosParamCreator(configuration).uploadWb(sid, type, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * WbServiceApi - factory interface
 * @export
 */
export const WbServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This method will do the same as clean slide in the room (except for there will be no UNDO)
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {number} roomid id of the room to clean
         * @param {number} wbid id of the white board to clean
         * @param {number} slide slide number (zero based)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cleanSlide(sid: string, roomid: number, wbid: number, slide: number, options?: any): AxiosPromise<ServiceResult> {
            return WbServiceApiFp(configuration).cleanSlide(sid, roomid, wbid, slide, options).then((request) => request(axios, basePath));
        },
        /**
         * This method will do the same as clean WB in the room (except for there will be no UNDO)
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {number} roomid id of the room to clean
         * @param {number} wbid id of the white board to clean
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cleanWb1(sid: string, roomid: number, wbid: number, options?: any): AxiosPromise<ServiceResult> {
            return WbServiceApiFp(configuration).cleanWb1(sid, roomid, wbid, options).then((request) => request(axios, basePath));
        },
        /**
         * This method will remove all whiteboards from given room  and create empty one(s) for room files specified
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {number} id id of the room to clean
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetWb(sid: string, id: number, options?: any): AxiosPromise<ServiceResult> {
            return WbServiceApiFp(configuration).resetWb(sid, id, options).then((request) => request(axios, basePath));
        },
        /**
         * This method will receive WB as binary data (png) and store it to temporary PDF/PNG file
         * @param {string} sid The SID of the User. This SID must be marked as Loggedin
         * @param {string} type the type of document being saved PNG/PDF
         * @param {UploadwbTypeBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadWb(sid: string, type: string, body?: UploadwbTypeBody, options?: any): AxiosPromise<ServiceResult> {
            return WbServiceApiFp(configuration).uploadWb(sid, type, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WbServiceApi - object-oriented interface
 * @export
 * @class WbServiceApi
 * @extends {BaseAPI}
 */
export class WbServiceApi extends BaseAPI {
    /**
     * This method will do the same as clean slide in the room (except for there will be no UNDO)
     * @param {string} sid The SID of the User. This SID must be marked as Loggedin
     * @param {number} roomid id of the room to clean
     * @param {number} wbid id of the white board to clean
     * @param {number} slide slide number (zero based)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WbServiceApi
     */
    public cleanSlide(sid: string, roomid: number, wbid: number, slide: number, options?: any) {
        return WbServiceApiFp(this.configuration).cleanSlide(sid, roomid, wbid, slide, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method will do the same as clean WB in the room (except for there will be no UNDO)
     * @param {string} sid The SID of the User. This SID must be marked as Loggedin
     * @param {number} roomid id of the room to clean
     * @param {number} wbid id of the white board to clean
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WbServiceApi
     */
    public cleanWb1(sid: string, roomid: number, wbid: number, options?: any) {
        return WbServiceApiFp(this.configuration).cleanWb1(sid, roomid, wbid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method will remove all whiteboards from given room  and create empty one(s) for room files specified
     * @param {string} sid The SID of the User. This SID must be marked as Loggedin
     * @param {number} id id of the room to clean
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WbServiceApi
     */
    public resetWb(sid: string, id: number, options?: any) {
        return WbServiceApiFp(this.configuration).resetWb(sid, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method will receive WB as binary data (png) and store it to temporary PDF/PNG file
     * @param {string} sid The SID of the User. This SID must be marked as Loggedin
     * @param {string} type the type of document being saved PNG/PDF
     * @param {UploadwbTypeBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WbServiceApi
     */
    public uploadWb(sid: string, type: string, body?: UploadwbTypeBody, options?: any) {
        return WbServiceApiFp(this.configuration).uploadWb(sid, type, body, options).then((request) => request(this.axios, this.basePath));
    }
}
